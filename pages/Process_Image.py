import streamlit as st
import cv2 as cv
import numpy as np
from PIL import Image, ImageOps
from io import BytesIO

st.set_page_config(
    page_title="üéàHoang Hao's Applications",
    page_icon=Image.open("./images/Logo/logo_welcome.png"),
    layout="wide",
    initial_sidebar_state="expanded",
)
st.title("Process Image Application")

def Introduce():
    st.header("1. Gi·ªõi thi·ªáu")
    st.markdown(
                """
                - Ch√†o m·ª´ng ƒë·∫øn v·ªõi ·ª©ng d·ª•ng ch·ªânh s·ª≠a ·∫£nh m·∫°nh m·∫Ω c·ªßa ch√∫ng t√¥i! ·ª®ng d·ª•ng n√†y cho ph√©p b·∫°n d·ªÖ d√†ng bi·∫øn ƒë·ªïi h√¨nh ·∫£nh c·ªßa m√¨nh v·ªõi m·ªôt lo·∫°t c√°c c√¥ng c·ª• ch·ªânh s·ª≠a chuy√™n nghi·ªáp. 
                B·∫°n c√≥ th·ªÉ c·∫Øt (**Cropping**), xoay (**Rotation**), l·∫≠t (**Flip**), ƒëi·ªÅu ch·ªânh m√†u s·∫Øc(**Colorspace**) v√† di chuy·ªÉn h√¨nh ·∫£nh (**Translation**) ch·ªâ v·ªõi v√†i thao t√°c ƒë∆°n gi·∫£n. H√£y c√πng kh√°m ph√° c√°c t√≠nh nƒÉng tuy·ªát v·ªùi n√†y nh√©!
                """
    )

def flip_image_opencv(img, flip_code):
  """
  L·∫≠t ·∫£nh s·ª≠ d·ª•ng OpenCV.

  Args:
    image_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn ·∫£nh.
    flip_code: M√£ l·∫≠t ·∫£nh:
      - 0: L·∫≠t theo chi·ªÅu d·ªçc (tr√™n xu·ªëng d∆∞·ªõi).
      - 1: L·∫≠t theo chi·ªÅu ngang (tr√°i sang ph·∫£i).
      - -1: L·∫≠t theo c·∫£ hai chi·ªÅu (ƒë∆∞·ªùng ch√©o).

  Returns:
    ·∫¢nh ƒë√£ ƒë∆∞·ª£c l·∫≠t ho·∫∑c None n·∫øu c√≥ l·ªói.
  """
  try:
    flipped_img = cv.flip(img, flip_code)
    return flipped_img
  except Exception as e:
    # st.warning(f"L·ªói: {e}")
    return None

def Flip():
    st.markdown("#### 2.1 Flip (L·∫≠t ·∫£nh)")
    st.markdown(
                """
                - **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**
                    - T·∫£i ·∫£nh c·∫ßn **Flip (l·∫≠t ·∫£nh)** ·ªü ph·∫ßn **Browser.**
                    - Nh·∫•n v√†o n√∫t **L·∫≠t Ngang** ƒë·ªÉ l·∫≠t ·∫£nh theo chi·ªÅu ngang. Nh·∫•n v√†o n√∫t **L·∫≠t D·ªçc** ƒë·ªÉ l·∫≠t ·∫£nh theo chi·ªÅu d·ªçc.
                """
    )
    cc = st.columns(2)
    with cc[0]:
        image_upload = st.file_uploader("T·∫£i ·∫£nh c·∫ßn l·∫≠t (Flip)", type=["png", "jpg", "jpeg"])
        if image_upload is not None:
            image_ul = np.array(Image.open(image_upload))
            image = None
            c = st.columns([1.5, 1.5, 8])
            with c[0]:
                if st.button("L·∫≠t ngang"):
                    image = flip_image_opencv(image_ul, 1)
            with c[1]:
                if st.button("L·∫≠t d·ªçc"):
                    image = flip_image_opencv(image_ul, 0)
            
            if image is not None:
                with cc[1]:
                    st.markdown("**·∫¢nh sau khi l·∫≠t**")
                    st.image(image)
                    result_image = Image.fromarray(image)
                    buf = BytesIO()
                    result_image.save(buf, format = "PNG")
                    byte_im = buf.getvalue()
                    if byte_im is not None:
                        st.download_button("Download ·∫£nh sau khi x·ª≠ l√≠", byte_im, 'flip_result.png', "image/png")

def rotate_image(image, angle):
    angle = -angle
    (h, w) = image.shape[:2]
    
    center = (w // 2, h // 2)
    
    # T·∫°o ma tr·∫≠n xoay v·ªõi g√≥c angle
    rotation_matrix = cv.getRotationMatrix2D(center, angle, 1.0)
    
    # Xoay ·∫£nh
    rotated_image = cv.warpAffine(image, rotation_matrix, (w, h))
    
    return rotated_image

def Rotation():
    st.markdown("#### 2.2 Rotation (Xoay ·∫£nh)")
    st.markdown(
                """
                - **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**
                    - T·∫£i ·∫£nh c·∫ßn **Rotation (xoay ·∫£nh)** ·ªü ph·∫ßn **Browser.**
                    - S·ª≠ d·ª•ng thanh tr∆∞·ª£t ƒë·ªÉ ch·ªçn g√≥c xoay. Ho·∫∑c nh·∫≠p gi√° tr·ªã g√≥c xoay v√†o √¥ b√™n c·∫°nh. Nh·∫•n n√∫t **Xoay Tr√°i** ho·∫∑c **Xoay Ph·∫£i** ƒë·ªÉ xoay nhanh **90** ƒë·ªô."
                """
    )
    cc = st.columns(2)
    with cc[0]:
        image_upload_rotate = st.file_uploader("T·∫£i ·∫£nh c·∫ßn xoay (Rotation)", type=["png", "jpg", "jpeg"])
        if image_upload_rotate is not None:
            image_ul = np.array(Image.open(image_upload_rotate))
            image = None
            angel = 0
            angel = st.slider("Ch·ªçn g√≥c xoay", 0, 360, 0)
            c = st.columns([1.5, 1.5, 8])
            with c[0]:
                if st.button("Xoay Tr√°i"):
                    angel = -90
            with c[1]:
                if st.button("Xoay Ph·∫£i"):
                    angel = 90
            image = rotate_image(image_ul, angel)
            if image is not None:
                with cc[1]:
                    st.markdown("**·∫¢nh sau khi xoay**")
                    st.image(image)
                    result_image = Image.fromarray(image)
                    buf = BytesIO()
                    result_image.save(buf, format = "PNG")
                    byte_im = buf.getvalue()
                    if byte_im is not None:
                        st.download_button("Download ·∫£nh sau khi x·ª≠ l√≠", byte_im, 'rotation_result.png', "image/png")

def convert_colorspace(image, color_type):
    # if color_type == "BGR":
    #     image = cv.cvtColor(image, cv.COLOR_RGB2BGR)
    if color_type == "Grayscale":
        image = cv.cvtColor(image, cv.COLOR_BGR2GRAY)
    if color_type == "HSV":
        image = cv.cvtColor(image, cv.COLOR_BGR2HSV)
    return image

def Colorspace():
    st.markdown("#### 2.3 Colorspace (ƒêi·ªÅu ch·ªânh m√†u s·∫Øc)")
    st.markdown(
                """
                - **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**
                    - T·∫£i ·∫£nh c·∫ßn **Colorspace (ƒêi·ªÅu ch·ªânh m√†u s·∫Øc)** ·ªü ph·∫ßn **Browser.**
                    - Ch·ªçn kh√¥ng gian m√†u mong mu·ªën t·ª´ danh s√°ch: **BGR, ƒêen tr·∫Øng (Grayscale), HSV**. Nh·∫•n n√∫t **√Åp d·ª•ng** ƒë·ªÉ chuy·ªÉn ƒë·ªïi.
                    - **L∆∞u √Ω:** "Chuy·ªÉn ƒë·ªïi sang **Grayscale** s·∫Ω lo·∫°i b·ªè th√¥ng tin m√†u s·∫Øc kh·ªèi ·∫£nh."
                """
    )
    cc = st.columns(2)
    with cc[0]:
        image_upload_color = st.file_uploader("T·∫£i ·∫£nh c·∫ßn ƒëi·ªÅu ch·ªânh m√†u s·∫Øc", type=["png", "jpg", "jpeg"])
        if image_upload_color is not None:
            image_ul = np.array(Image.open(image_upload_color))
            image = None
            c = st.columns([1.5, 1.5, 8])
            color_type = st.selectbox(
                'Ch·ªçn m·ªôt t√πy ch·ªçn:',
                ('BGR', 'Grayscale', 'HSV')
)
            image = convert_colorspace(image_ul, color_type)
            if image is not None:
                with cc[1]:
                    st.markdown("**·∫¢nh sau khi ƒëi·ªÅu ch·ªânh m√†u s·∫Øc**")
                    st.image(image)
                    result_image = Image.fromarray(image)
                    buf = BytesIO()
                    result_image.save(buf, format = "PNG")
                    byte_im = buf.getvalue()
                    if byte_im is not None:
                        st.download_button("Download ·∫£nh sau khi x·ª≠ l√≠", byte_im, 'colorspace_result.png', "image/png")

def translate_image(image, tx, ty):

  (rows, cols) = image.shape[:2]

  M = np.float32([[1, 0, tx], [0, 1, ty]])

  translated_image = cv.warpAffine(image, M, (cols, rows))

  return translated_image

def Translation():
    st.markdown("#### 2.4 Di chuy·ªÉn h√¨nh ·∫£nh (Translation)")
    st.markdown(
                """
                - **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**
                    - T·∫£i ·∫£nh c·∫ßn **Translation (Di chuy·ªÉn)** ·ªü ph·∫ßn **Browser.**
                    - Nh·∫≠p gi√° tr·ªã pixel b·∫°n mu·ªën di chuy·ªÉn ·∫£nh theo chi·ªÅu ngang (tr·ª•c X) v√† chi·ªÅu d·ªçc (tr·ª•c Y) v√†o c√°c √¥ t∆∞∆°ng ·ª©ng."
                """
    )
    cc = st.columns(2)
    with cc[0]:
        image_upload_color = st.file_uploader("T·∫£i ·∫£nh c·∫ßn di chuy·ªÉn", type=["png", "jpg", "jpeg"])
        if image_upload_color is not None:
            image_ul = np.array(Image.open(image_upload_color))
            image = None
            c = st.columns([1.5, 1.5, 8])
            tx = st.slider("Tr·ª•c X", -image_ul.shape[1], image_ul.shape[1], 0)
            ty = st.slider("Tr·ª•c Y", -image_ul.shape[1], image_ul.shape[1], 0)
            image = translate_image(image_ul, tx, ty)
            if image is not None:
                with cc[1]:
                    st.markdown("**·∫¢nh sau khi di chuy·ªÉn**")
                    st.image(image)
                    result_image = Image.fromarray(image)
                    buf = BytesIO()
                    result_image.save(buf, format = "PNG")
                    byte_im = buf.getvalue()
                    if byte_im is not None:
                        st.download_button("Download ·∫£nh sau khi x·ª≠ l√≠", byte_im, 'translation_result.png', "image/png")
    
def Cropping():
    st.markdown("#### 2.5 C·∫Øt ·∫£nh (Cropping)")
    st.markdown(
                """
                - **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**
                    - T·∫£i ·∫£nh c·∫ßn **Cropping (C·∫Øt ·∫£nh)** ·ªü ph·∫ßn **Browser.**
                    - K√©o c√°c c·∫°nh ho·∫∑c g√≥c c·ªßa khung c·∫Øt ƒë·ªÉ ƒëi·ªÅu ch·ªânh v√πng ch·ªçn. Nh·∫•n n√∫t **C·∫Øt** ƒë·ªÉ c·∫Øt ·∫£nh.
                """
    )
    cc = st.columns(2)
    with cc[0]:
        image_upload_crop = st.file_uploader("T·∫£i ·∫£nh c·∫ßn c·∫Øt", type=["png", "jpg", "jpeg"])
        if image_upload_crop is not None:
            image_ul = Image.open(image_upload_crop)
            width, height = image_ul.size

            x_min = st.slider("X min", 0, width - 1, 0)

            y_min = st.slider("Y min", 0, height - 1, 0)

            x_max = st.slider("X max", x_min + 1, width, width)

            y_max = st.slider("Y max", y_min + 1, height, height)
            cropped_img = image_ul.crop((x_min, y_min, x_max, y_max))
            with cc[1]:
                st.markdown("**·∫¢nh sau khi di c·∫Øt**")
                st.image(cropped_img)
                cropped_img = np.array(cropped_img)
                result_image = Image.fromarray(cropped_img)
                buf = BytesIO()
                result_image.save(buf, format = "PNG")
                byte_im = buf.getvalue()
                if byte_im is not None:
                    st.download_button("Download ·∫£nh sau khi x·ª≠ l√≠", byte_im, 'crop_result.png', "image/png")

def Application():
    st.header("2. ·ª®ng d·ª•ng")
    c = st.columns(2)
    with c[0]:
        Flip()
        Rotation()
        Colorspace()
    with c[1]:
        Translation()
        Cropping()
def App():
    Introduce()
    Application()
App()