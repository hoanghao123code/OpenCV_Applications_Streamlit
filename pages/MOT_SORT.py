import streamlit as st
from PIL import Image, ImageOps
import cv2 as cv

st.set_page_config(
    page_title="üéàHoang Hao's Applications",
    page_icon=Image.open("./images/Logo/logo_welcome.png"),
    layout="wide",
    initial_sidebar_state="expanded",
)
st.title("SORT (Simple Online Realtime Object Tracking)")
def SORT_Algorithm():
    st.header("1. Thu·∫≠t to√°n SORT")
    st.markdown("#### 1.1 Gi·ªõi thi·ªáu")
    st.markdown(
                """
                - **SORT (Simple Online and Realtime Tracking)** l√† m·ªôt thu·∫≠t to√°n theo d√µi ƒë·ªëi t∆∞·ª£ng ƒëa m·ª•c ti√™u 
                **(multi-object tracking)** ph·ªï bi·∫øn, ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi **Alex Bewley** v√† c·ªông s·ª± v√†o nƒÉm 2016. 
                **SORT** ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ƒë∆°n gi·∫£n, hi·ªáu qu·∫£ v√† ph√π h·ª£p v·ªõi c√°c ·ª©ng d·ª•ng th·ªùi gian th·ª±c **(real-time applications)**.
                """)
    st.markdown("D∆∞·ªõi ƒë√¢y l√† h√¨nh ·∫£nh so s√°nh **Speed(T·ªëc ƒë·ªô)** v√† **Accuracy (ƒê·ªô ch√≠nh x√°c)** c·ªßa **SORT** v·ªõi c√°c thu·∫≠t to√°n theo d√µi ƒë·ªëi t∆∞·ª£ng kh√°c.")
    c = st.columns([2, 6, 2])
    c[1].image(cv.imread("./images/MOT_SORT/SORT.PNG"), channels="BGR", caption="So s√°nh Speed v√† Accuracy c·ªßa c√°c thu·∫≠t to√°n theo d√µi ƒë·ªëi t∆∞·ª£ng")
    st.markdown("#### 1.2 C√°ch ho·∫°t ƒë·ªông")
    st.markdown("D∆∞·ªõi ƒë√¢y l√† h√¨nh ·∫£nh v·ªÅ lu·ªìng x·ª≠ l√≠ c·ªßa thu·∫≠t to√°n **SORT**")
    c = st.columns([2, 6, 2])
    c[1].image(cv.imread("./images/MOT_SORT/SORT_Algorithm.PNG"), channels="BGR", caption="Lu·ªìng x·ª≠ l√≠ c·ªßa SORT")
    st.markdown("""
                **SORT** k·∫øt h·ª£p gi·ªØa **ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng (object detection)** v√† **l·ªçc Kalman (Kalman filter)**, gi·∫£i thu·∫≠t **Hungarian** ƒë·ªÉ theo d√µi c√°c ƒë·ªëi t∆∞·ª£ng 
                qua c√°c khung h√¨nh. D∆∞·ªõi ƒë√¢y l√† c√°c b∆∞·ªõc ch√≠nh:
                """)
    st.markdown("##### 1. Ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng (Object Detection)")
    st.markdown(
                """
                - **SORT** kh√¥ng t·ª± th·ª±c hi·ªán ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng m√† d·ª±a v√†o c√°c m√¥ h√¨nh ph√°t hi·ªán **(detector)** nh∆∞ **YOLO, SSD, Faster R-CNN...**
                - Output c·ªßa **detector** l√† c√°c **bounding box** bi·ªÉu di·ªÖn v·ªã tr√≠ v√† k√≠ch th∆∞·ªõc c·ªßa c√°c ƒë·ªëi t∆∞·ª£ng.
                """)
    st.markdown("##### 2. D·ª± ƒëo√°n v·ªã tr√≠ ti·∫øp theo (Prediction)")
    st.markdown(
                """
                - **SORT** s·ª≠ d·ª•ng [Kalman Filter](https://www.researchgate.net/profile/Chaw-Bing-Chang/publication/224680746_Kalman_filter_algorithms_for_a_multi-sensor_system/links/54a170c20cf257a636036eaf/Kalman-filter-algorithms-for-a-multi-sensor-system.pdf) 
                ƒë·ªÉ d·ª± ƒëo√°n v·ªã tr√≠ v√† k√≠ch th∆∞·ªõc c·ªßa c√°c **bounding box** trong khung h√¨nh ti·∫øp theo.
                - Tr·∫°ng th√°i c·ªßa m·ªôt ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c bi·ªÉu di·ªÖn b·ªüi m·ªôt vector tr·∫°ng th√°i bao g·ªìm:
                    - $X = [x, y, s, r, x', y', s']$
                - **Trong ƒë√≥**:
                    - $x, y$ : To·∫° ƒë·ªô trung t√¢m **bounding box.**
                    - $s$ : Di·ªán t√≠ch c·ªßa **bounding box.**
                    - $r$ : T·ª∑ l·ªá khung h√¨nh (width / height).
                    - $x', y', s'$ : L·∫ßn l∆∞·ª£t l√† c√°c gi√° tr·ªã v·∫≠n t·ªëc t∆∞∆°ng ·ª©ng c·ªßa $x, y, s$.
                """)
    st.markdown("##### 3. Li√™n k·∫øt c√°c ƒë·ªëi t∆∞·ª£ng (Data Association)")
    st.markdown(
                """
                - **SORT** s·ª≠ d·ª•ng thu·∫≠t to√°n [Hungarian Algorithm](https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=9de0d77fed3781f98de743aba6ac4967688d711f)
                ƒë·ªÉ li√™n k·∫øt c√°c bounding box d·ª± ƒëo√°n (t·ª´ **Kalman Filter**) v·ªõi c√°c **bounding box** ph√°t hi·ªán (t·ª´ **detector**).
                - Li√™n k·∫øt d·ª±a tr√™n ch·ªâ s·ªë **IoU (Intersection over Union)** gi·ªØa c√°c **bounding box**.
                """)
    st.markdown("##### 4. C·∫≠p nh·∫≠t tr·∫°ng th√°i")
    st.markdown(
                """
                - Sau khi li√™n k·∫øt ƒë∆∞·ª£c th·ª±c hi·ªán, **Kalman Filter** c·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i c·ªßa ƒë·ªëi t∆∞·ª£ng d·ª±a tr√™n th√¥ng tin t·ª´ **bounding box** ph√°t hi·ªán.
                """)
    st.markdown("##### 5. Qu·∫£n l√Ω ID v√† ƒë·ªëi t∆∞·ª£ng m·ªõi")
    st.markdown(
                """
                - **SORT** theo d√µi c√°c ƒë·ªëi t∆∞·ª£ng b·∫±ng c√°ch g√°n **ID** duy nh·∫•t cho t·ª´ng ƒë·ªëi t∆∞·ª£ng.
                - C√°c ƒë·ªëi t∆∞·ª£ng m·∫•t li√™n k·∫øt sau m·ªôt s·ªë khung h√¨nh (do kh√¥ng ƒë∆∞·ª£c ph√°t hi·ªán) s·∫Ω b·ªã lo·∫°i b·ªè.
                - ƒê·ªëi t∆∞·ª£ng m·ªõi xu·∫•t hi·ªán trong khung h√¨nh s·∫Ω ƒë∆∞·ª£c g√°n **ID** m·ªõi.
                """)

def Challenger_of_SORT():
    st.header("2. M·ªôt s·ªë th√°ch th·ª©c c·ªßa thu·∫≠t to√°n SORT")
    st.markdown("#### 2.1 Nh·∫°y c·∫£m v·ªõi vi·ªác m·∫•t d·∫•u (Occlusion)")
    st.markdown(
                """
                - **SORT** s·ª≠ d·ª•ng **Kalman Filter** ƒë·ªÉ d·ª± ƒëo√°n v·ªã tr√≠ ti·∫øp theo c·ªßa ƒë·ªëi t∆∞·ª£ng v√† **Hungarian Algorithm** ƒë·ªÉ g√°n ƒë·ªëi t∆∞·ª£ng. 
                Tuy nhi√™n, khi x·∫£y ra che khu·∫•t ho·∫∑c ƒë·ªëi t∆∞·ª£ng b·ªã t·∫°m th·ªùi m·∫•t d·∫•u, thu·∫≠t to√°n d·ªÖ g√°n sai ho·∫∑c t·∫°o **ID** m·ªõi cho ƒë·ªëi t∆∞·ª£ng, 
                d·∫´n ƒë·∫øn s·ª± ph√¢n m·∫£nh **(ID switching)**.
                """)
    st.markdown("#### 2.2 Kh√¥ng t·∫≠n d·ª•ng c√°c ƒë·∫∑c tr∆∞ng ph·ª©c t·∫°p")
    st.markdown(
                """
                - **SORT** ch·ªâ d·ª±a tr√™n th√¥ng tin v·ªÅ v·ªã tr√≠ **(bounding box)** v√† kh√¥ng s·ª≠ d·ª•ng c√°c ƒë·∫∑c tr∆∞ng tr·ª±c quan (nh∆∞ ƒë·∫∑c tr∆∞ng t·ª´ h√¨nh ·∫£nh ho·∫∑c m√†u s·∫Øc).
                ƒêi·ªÅu n√†y khi·∫øn n√≥ kh√≥ ph√¢n bi·ªát gi·ªØa c√°c ƒë·ªëi t∆∞·ª£ng t∆∞∆°ng t·ª± nhau trong tr∆∞·ªùng h·ª£p c√≥ nhi·ªÅu ƒë·ªëi t∆∞·ª£ng g·∫ßn nhau.
                """)
    

def App():
    SORT_Algorithm()
    Challenger_of_SORT()
App()